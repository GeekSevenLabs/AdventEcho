// <auto-generated />
using System;
using System.Collections.Generic;
using GeekSevenLabs.AdventEcho.Infrastructure.DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GeekSevenLabs.AdventEcho.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(AdventEchoDbContext))]
    [Migration("20250304032738_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GeekSevenLabs.AdventEcho.Domain.Churches.Church", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Churches");
                });

            modelBuilder.Entity("GeekSevenLabs.AdventEcho.Domain.Districts.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("PastorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PastorId")
                        .IsUnique();

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("GeekSevenLabs.AdventEcho.Domain.Noticies.Notice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChurchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("NotifyEveryDay")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.ComplexProperty<Dictionary<string, object>>("Period", "GeekSevenLabs.AdventEcho.Domain.Noticies.Notice.Period#PeriodVo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTimeOffset>("EndIn")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("StartIn")
                                .HasColumnType("datetimeoffset");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ChurchId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Notices");
                });

            modelBuilder.Entity("GeekSevenLabs.AdventEcho.Domain.People.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChurchId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("Contact", "GeekSevenLabs.AdventEcho.Domain.People.Person.Contact#ContactVo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "GeekSevenLabs.AdventEcho.Domain.People.Person.Name#NameVo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("First")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Last")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ChurchId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("GeekSevenLabs.AdventEcho.Domain.Schedules.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChurchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChurchId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("GeekSevenLabs.AdventEcho.Domain.Schedules.ScheduleDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Day")
                        .HasColumnType("date");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleDays");
                });

            modelBuilder.Entity("GeekSevenLabs.AdventEcho.Domain.Schedules.ScheduleDayAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ForScheduleType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("ScheduleDayAssignments");
                });

            modelBuilder.Entity("GeekSevenLabs.AdventEcho.Domain.Schedules.ScheduleEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("ScheduleEvents");
                });

            modelBuilder.Entity("GeekSevenLabs.AdventEcho.Domain.Schedules.ScheduledPerson", b =>
                {
                    b.Property<Guid>("PeopleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScheduleDayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PeopleId", "ScheduleDayId");

                    b.HasIndex("ScheduleDayId");

                    b.ToTable("ScheduledPerson");
                });

            modelBuilder.Entity("GeekSevenLabs.AdventEcho.Domain.Churches.Church", b =>
                {
                    b.HasOne("GeekSevenLabs.AdventEcho.Domain.Districts.District", "District")
                        .WithMany("Churches")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("GeekSevenLabs.AdventEcho.Domain.Districts.District", b =>
                {
                    b.HasOne("GeekSevenLabs.AdventEcho.Domain.People.Person", null)
                        .WithOne()
                        .HasForeignKey("GeekSevenLabs.AdventEcho.Domain.Districts.District", "PastorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeekSevenLabs.AdventEcho.Domain.Noticies.Notice", b =>
                {
                    b.HasOne("GeekSevenLabs.AdventEcho.Domain.Churches.Church", null)
                        .WithMany()
                        .HasForeignKey("ChurchId");

                    b.HasOne("GeekSevenLabs.AdventEcho.Domain.Districts.District", null)
                        .WithMany()
                        .HasForeignKey("DistrictId");
                });

            modelBuilder.Entity("GeekSevenLabs.AdventEcho.Domain.People.Person", b =>
                {
                    b.HasOne("GeekSevenLabs.AdventEcho.Domain.Churches.Church", null)
                        .WithMany()
                        .HasForeignKey("ChurchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeekSevenLabs.AdventEcho.Domain.Schedules.Schedule", b =>
                {
                    b.HasOne("GeekSevenLabs.AdventEcho.Domain.Churches.Church", null)
                        .WithMany()
                        .HasForeignKey("ChurchId");

                    b.HasOne("GeekSevenLabs.AdventEcho.Domain.Districts.District", null)
                        .WithMany()
                        .HasForeignKey("DistrictId");
                });

            modelBuilder.Entity("GeekSevenLabs.AdventEcho.Domain.Schedules.ScheduleDay", b =>
                {
                    b.HasOne("GeekSevenLabs.AdventEcho.Domain.Schedules.ScheduleEvent", null)
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("GeekSevenLabs.AdventEcho.Domain.Schedules.Schedule", "Schedule")
                        .WithMany("Days")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("GeekSevenLabs.AdventEcho.Domain.Schedules.ScheduledPerson", b =>
                {
                    b.HasOne("GeekSevenLabs.AdventEcho.Domain.People.Person", null)
                        .WithMany("ScheduledPeople")
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekSevenLabs.AdventEcho.Domain.Schedules.ScheduleDay", null)
                        .WithMany("ScheduledPeople")
                        .HasForeignKey("ScheduleDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeekSevenLabs.AdventEcho.Domain.Districts.District", b =>
                {
                    b.Navigation("Churches");
                });

            modelBuilder.Entity("GeekSevenLabs.AdventEcho.Domain.People.Person", b =>
                {
                    b.Navigation("ScheduledPeople");
                });

            modelBuilder.Entity("GeekSevenLabs.AdventEcho.Domain.Schedules.Schedule", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("GeekSevenLabs.AdventEcho.Domain.Schedules.ScheduleDay", b =>
                {
                    b.Navigation("ScheduledPeople");
                });
#pragma warning restore 612, 618
        }
    }
}
