@page "/Account/Register"
@layout AnonymousLayout

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using GeekSevenLabs.AdventEcho.Application.People
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IPersonQueries PersonQueries

<EchoPage Title="Register" MaxWidth="EchoMaxWidth.Small" HiddenBars>
    <Content>
        <section class="tw|flex tw|flex-col tw|gap-4">
            <MudStack Spacing="0">
                <MudText Color="Color.Primary" Typo="Typo.h4" Class="tw|font-thin">Let's go.</MudText>
                <MudText Color="Color.Primary" Typo="Typo.h5" Class="tw|font-bold">Create a new account</MudText>
            </MudStack>

            <MudStack>
                <StatusMessage Message="@Message"/>
            </MudStack>

            <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                
                <DataAnnotationsValidator/>

                <MudStack Spacing="4">
                    <MudText Typo="Typo.body1" GutterBottom="true">Preencha as informações para criar uma conta.</MudText>

                    <MudStaticTextField For="@(() => Input.FirstName)" @bind-Value="Input.FirstName"
                                        Label="Nome" Placeholder="Ellen"
                                        Variant="Variant.Outlined" Immediate
                                        UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "first-name" }, { "aria-required", "true" } })"/>

                    <MudStaticTextField For="@(() => Input.LastName)" @bind-Value="Input.LastName"
                                        Label="Sobrenome" Placeholder="Gould White"
                                        Variant="Variant.Outlined" Immediate
                                        UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "last-name" }, { "aria-required", "true" } })"/>

                    <MudStaticTextField For="@(() => Input.PhoneNumber)" @bind-Value="Input.PhoneNumber"
                                        Label="Número/Whatsapp" Placeholder="(00) 0 0000-0000" Immediate
                                        Variant="Variant.Outlined" Mask="@(new PatternMask("(00) 0 0000-0000"))"
                                        UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "phone-number" }, { "aria-required", "true" } })"/>
                    
                    <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                                        Label="Email" Placeholder="name@example.com"
                                        Variant="Variant.Outlined" Immediate
                                        UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "username" }, { "aria-required", "true" } })"/>

                    <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                        Label="Senha" InputType="InputType.Password" Placeholder="password"
                                        Variant="Variant.Outlined" Immediate
                                        UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "new-password" }, { "aria-required", "true" } })"/>

                    <MudStaticTextField For="@(() => Input.ConfirmPassword)" @bind-Value="Input.ConfirmPassword"
                                        Label="Confirmar senha" InputType="InputType.Password" Placeholder="confirm password"
                                        Variant="Variant.Outlined" Immediate
                                        UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "new-password" }, { "aria-required", "true" } })"/>

                    <ValidationSummary/>

                    <MudStaticButton
                        Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                        FormAction="FormAction.Submit">
                        Criar conta
                    </MudStaticButton>
                </MudStack>
            </EditForm>

            <MudDivider/>

            <MudStack Spacing="0">
                <MudLink Href="Account/Login">
                    Eu já tenho uma conta, quero entrar
                </MudLink>
            </MudStack>

            <MudStack>
                <MudText Typo="Typo.body1" GutterBottom="true">Use another service to register.</MudText>
                <ExternalLoginPicker/>
            </MudStack>
            
        </section>
    </Content>
</EchoPage>

@code 
{
    private IEnumerable<IdentityError>? _identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();
    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    private string? Message => _identityErrors is null ? null : $"Error: {string.Join(", ", _identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        await GetEmailStore().SetEmailAsync(user, Input.Email, CancellationToken.None);
        
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            _identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl }
        );

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new Dictionary<string, object?> { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private static ApplicationUser CreateUser()
    {
        try
        {
            return new ApplicationUser();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                                                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }

        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Nome é obrigatório.")]
        [DataType(DataType.Text)]
        public string FirstName { get; set; } = "";
        
        [Required(ErrorMessage = "Sobrenome é obrigatório.")]
        [DataType(DataType.Text)]
        public string LastName { get; set; } = "";
        
        [Required(ErrorMessage = "Número de celular é obrigatório.")]
        [DataType(DataType.PhoneNumber)]
        [RegularExpression(@"^(?:(^\+\d{2})?)(?:([1-9]{2})|([0-9]{3})?)(\d{4,5})(\d{4})$", ErrorMessage = "O número de celular é inválido.")]
        public string PhoneNumber { get; set; } = "";
        
        [Required(ErrorMessage = "Email é obrigatório.")]
        [EmailAddress]
        [DataType(DataType.EmailAddress)]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Senha é obrigatória.")]
        [StringLength(100, ErrorMessage = "Senha deve ter pelo menos {0} e no máximo {1}", MinimumLength = 8)]
        [DataType(DataType.Password)]
        [Display(Name = "Senha")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password, ErrorMessage = "")]
        [Display(Name = "Confirmação de senha")]
        [Compare("Password", ErrorMessage = "As senhas não conferem.")]
        public string ConfirmPassword { get; set; } = "";
    }

}