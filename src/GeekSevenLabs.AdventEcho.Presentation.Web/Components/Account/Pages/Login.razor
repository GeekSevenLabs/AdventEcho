@page "/Account/Login"
@layout AnonymousLayout

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<EchoPage Title="Login" MaxWidth="EchoMaxWidth.Small" HiddenBars>
    <Content>

        <section class="tw|flex tw|flex-col tw|gap-4">
            <MudStack Spacing="0">
                <MudText Color="Color.Primary" Typo="Typo.h4" Class="tw|font-thin">Hello,</MudText>
                <MudText Color="Color.Primary" Typo="Typo.h5" Class="tw|font-bold">Welcome!</MudText>
            </MudStack>

            <MudStack>
                <StatusMessage Message="@_errorMessage"/>
            </MudStack>

            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator/>

                <MudStack Spacing="4">

                    <MudText>
                        Por favor, entre com suas credenciais.
                    </MudText>

                    <MudStaticTextField
                        For="@(() => Input.Email)" @bind-Value="Input.Email"
                        Label="Email" Placeholder="name@example.com"
                        Variant="Variant.Outlined"
                        UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "username" }, { "aria-required", "true" } })"/>

                    <MudStaticTextField
                        For="@(() => Input.Password)" @bind-Value="Input.Password"
                        Label="Senha" InputType="InputType.Password" Placeholder="password"
                        Variant="Variant.Outlined"
                        UserAttributes="@(new Dictionary<string, object?> { { "autocomplete", "current-password" }, { "aria-required", "true" } })"/>

                    <MudStaticCheckBox
                        For="@(() => Input.RememberMe)"
                        Color="Color.Primary"
                        @bind-Value="Input.RememberMe">Lembre-se de mim
                    </MudStaticCheckBox>

                    <ValidationSummary/>

                    <MudStaticButton
                        Variant="Variant.Filled"
                        Color="Color.Primary"
                        FormAction="FormAction.Submit">
                        Entrar
                    </MudStaticButton>

                </MudStack>
            </EditForm>

            <MudDivider/>

            <MudStack Spacing="0">
                <MudLink Href="Account/ForgotPassword">
                    Ops, esqueci minha senha
                </MudLink>
                <MudLink Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                    Sou novo por aqui, quero me cadastrar
                </MudLink>
                <MudLink Href="Account/ResendEmailConfirmation">
                    Reenviar e-mail de confirmação
                </MudLink>
            </MudStack>

            <MudStack>
                <ExternalLoginPicker/>
            </MudStack>
            
        </section>

    </Content>
</EchoPage>


@code
{
    private string? _errorMessage;

    [CascadingParameter] public required HttpContext HttpContext { get; set; }
    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();
    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input!.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new Dictionary<string, object?> { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            _errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")] public bool RememberMe { get; set; }
    }

}