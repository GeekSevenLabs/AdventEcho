@page "/Account/RegisterConfirmation"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<EchoPage Title="Confirmação de conta" MaxWidth="EchoMaxWidth.Small" HiddenBars >
    <Content>
        <section class="tw|flex tw|flex-col tw|gap-4">
            <MudStack Spacing="0">
                <MudText Color="Color.Primary" Typo="Typo.h4" Class="tw|font-thin">Let's go!,</MudText>
                <MudText Color="Color.Primary" Typo="Typo.h5" Class="tw|font-bold">I need to confirm my account</MudText>
            </MudStack>

            <MudStack>
                <StatusMessage Message="@_statusMessage"/>
            </MudStack>
            
            <MudStack>
                <MudAlert Severity="Severity.Success">
                    Por favor, verifique seu email para confirmar sua conta.
                </MudAlert>
            </MudStack>
            
        </section>
    </Content>
</EchoPage>


@code {
    private string? _statusMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = null!;
    [SupplyParameterFromQuery] private string? Email { get; set; }
    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);

        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            _statusMessage = "Error finding user for unspecified email";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

        var absoluteUri = NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri;
        var parameters = new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl };
        
        var emailConfirmationLink = NavigationManager.GetUriWithQueryParameters(absoluteUri, parameters);

        await EmailSender.SendConfirmationLinkAsync(user, Email, emailConfirmationLink);
    }

}